@inject IModalUserWarningState ModalUserWarning

@implements IDisposable

<Alert @ref="_alert" Color="Color.Danger">
    @if (_commandStatus.HasValue)
    {
        @if (_commandStatus == ApiCommandStatus.UnableToMakeApiCall)
        {
            <AlertDescription>
                <Fields ColumnSize="ColumnSize.Is12" Margin="Margin.Is0" Class="mt-0">
                    <Field ColumnSize="ColumnSize.Is12" Class="d-inline-block align-top mb-0">
                        Ошибка сети. Пожалуйста, проверьте подключение к Интернету.
                    </Field>
                </Fields>
            </AlertDescription>
        }
        else
        {
            <AlertMessage>
                <Icon Name="@("fa-exclamation-triangle")" Style="color:red" /> <b>Ошибка</b>
            </AlertMessage>
            <AlertDescription>
                <Fields ColumnSize="ColumnSize.Is12" Margin="Margin.Is0" Class="mt-0">
                    <Field ColumnSize="ColumnSize.Is12" Class="d-inline-block align-top mb-0">
                        @_errorText
                    </Field>
                    <Field ColumnSize="ColumnSize.Is12" Class="d-inline-block align-top mb-0">
                        @_reqIdText
                    </Field>
                </Fields>
            </AlertDescription>
        }
    }
</Alert>

@code
{
    private ApiCommandStatus? _commandStatus = null;
    private string _errorText = null;
    private string _reqIdText = null;

    Alert _alert;

    private EventHandler _warningPropertiesChangedHandler;

    protected override void OnInitialized()
    {
        _warningPropertiesChangedHandler = (s, args) => OnWarningValuesChangedCallback();
        ModalUserWarning.PropertiesUpdated += _warningPropertiesChangedHandler;

        base.OnInitialized();
    }

    private void OnWarningValuesChangedCallback()
    {
        _commandStatus = ModalUserWarning.Status;
        _errorText = ModalUserWarning.ErrorMessage;
        _reqIdText = (ModalUserWarning.RequestId != null)
            ? $"Идентификатор запроса: {ModalUserWarning.RequestId.ToString()}"
            : null;

        if (!string.IsNullOrEmpty(ModalUserWarning.ErrorMessage))
        {
            _alert.Show();
        }
        else
        {
            _alert.Hide();
        }

        //если уже были показаны, то показ не вызывает перерисовку, делаем руками
        StateHasChanged();
    }

    public void Hide()
    {
        _commandStatus = null;
        _errorText = null;
        _reqIdText = null;
        _alert.Hide();
    }

    public void Dispose()
    {
        ModalUserWarning.PropertiesUpdated -= _warningPropertiesChangedHandler;
    }
}